/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a strict user-ownership model for the /users/{userId} collection,
 *  ensuring that only the authenticated user can access their own profile data.
 *
 * Data Structure:
 * - All user data is stored under the /users/{userId} collection.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - Data validation is relaxed to allow for rapid prototyping, except for critical
 *   ownership checks.
 * - The rules explicitly deny any write operations that do not meet the
 *   ownership criteria.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` parameter in the path to the
 *   authenticated user's `uid`. The `id` field in the `UserProfile` document must
 *   also match the `userId` to maintain data consistency. This approach avoids the
 *   need for complex queries or additional reads to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with UID 'XeTG6cYWwQV9gf7w28G5KHEF3fj2' can read their own profile.
     * @allow (create) User with UID 'XeTG6cYWwQV9gf7w28G5KHEF3fj2' can create their own profile.
     * @allow (update) User with UID 'XeTG6cYWwQV9gf7w28G5KHEF3fj2' can update their own profile.
     * @allow (delete) User with UID 'XeTG6cYWwQV9gf7w28G5KHEF3fj2' can delete their own profile.
     * @deny (get) User with UID 'otherUserId' cannot read the profile of user 'XeTG6cYWwQV9gf7w28G5KHEF3fj2'.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for user 'XeTG6cYWwQV9gf7w28G5KHEF3fj2'.
     * @deny (update) User with UID 'otherUserId' cannot update the profile of user 'XeTG6cYWwQV9gf7w28G5KHEF3fj2'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile of user 'XeTG6cYWwQV9gf7w28G5KHEF3fj2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the owner to get their own profile.
      allow get: if isOwner(userId);

      // Prevent listing of all users.
      allow list: if false;

      // Allow the owner to create their own profile, enforcing that the ID matches the userId.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the owner to update their own profile, enforcing immutability of the ID.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the owner to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}