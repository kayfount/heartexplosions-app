/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to life purpose reports while restricting
 * write access to authorized users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the user can
 *   read or write their own profile data.
 * - /reports/{reportId}: Stores life purpose reports. Publicly readable,
 *   but write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Reports are publicly readable but not writable by end-users.
 * - Default security posture for ambiguous relationships is strict
 *   owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profiles collection. Only the authenticated user
     *              can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' can read their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User 'user_def' cannot create a profile with ID 'user_abc'.
     * @deny (get) User 'user_def' cannot read the profile of 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the life purpose reports collection. Allows public read access
     *              but restricts write access.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list the reports.
     * @deny (create) No user can create a report.
     * @deny (update) No user can update a report.
     * @deny (delete) No user can delete a report.
     * @principle Allows public read access with owner-only writes (currently disabled).
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
