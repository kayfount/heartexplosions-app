{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the Heart Compass application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "creationTimestamp": {
          "type": "string",
          "description": "Timestamp of when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "creationTimestamp"
      ]
    },
    "Basecamp": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Basecamp",
      "type": "object",
      "description": "Stores the data captured during the Basecamp (Registration Wizard) onboarding process.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Basecamp data."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Basecamp)"
        },
        "currentSeason": {
          "type": "string",
          "description": "User's current season of life."
        },
        "constraints": {
          "type": "string",
          "description": "User's constraints."
        },
        "values": {
          "type": "string",
          "description": "User's values."
        },
        "strengths": {
          "type": "string",
          "description": "User's strengths."
        },
        "interests": {
          "type": "string",
          "description": "User's interests."
        },
        "timeBudget": {
          "type": "string",
          "description": "User's time budget."
        },
        "startingPointSummary": {
          "type": "string",
          "description": "Personalized 'Starting Point' summary generated from the Basecamp data."
        }
      },
      "required": [
        "id",
        "userId",
        "currentSeason",
        "constraints",
        "values",
        "strengths",
        "interests",
        "timeBudget",
        "startingPointSummary"
      ]
    },
    "LifePurposeReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LifePurposeReport",
      "type": "object",
      "description": "Stores the Life Purpose Report generated by the AI based on the Driver (Reveal Stage) data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Life Purpose Report."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N LifePurposeReport)"
        },
        "enneagramType": {
          "type": "string",
          "description": "User's Enneagram Type."
        },
        "wing": {
          "type": "string",
          "description": "User's Wing."
        },
        "instinctualStacking": {
          "type": "string",
          "description": "User's Instinctual Stacking."
        },
        "tritype": {
          "type": "string",
          "description": "User's Tritype."
        },
        "reportText": {
          "type": "string",
          "description": "The full text of the Life Purpose Report."
        },
        "pdfUrl": {
          "type": "string",
          "description": "URL of the PDF version of the report in Firebase Storage.",
          "format": "uri"
        },
        "audioUrl": {
          "type": "string",
          "description": "URL of the ElevenLabs audio file version of the report in Firebase Storage.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "userId",
        "enneagramType",
        "wing",
        "instinctualStacking",
        "tritype",
        "reportText",
        "pdfUrl",
        "audioUrl"
      ]
    },
    "PurposeProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PurposeProfile",
      "type": "object",
      "description": "Stores the Purpose Profile generated by the AI in the Destination (Decide Stage).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Purpose Profile."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N PurposeProfile)"
        },
        "focusArea": {
          "type": "string",
          "description": "The user-selected focus area (career, contribution, or calling)."
        },
        "profileText": {
          "type": "string",
          "description": "The full text of the Purpose Profile."
        },
        "alignedPath": {
          "type": "string",
          "description": "The most aligned path identified by the AI."
        },
        "edgeOfChoosingPrompts": {
          "type": "string",
          "description": "Prompts to help the user make a decision."
        },
        "quickWins": {
          "type": "string",
          "description": "Quick wins for the user to get started."
        }
      },
      "required": [
        "id",
        "userId",
        "focusArea",
        "profileText",
        "alignedPath",
        "edgeOfChoosingPrompts",
        "quickWins"
      ]
    },
    "RoutePlan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoutePlan",
      "type": "object",
      "description": "Stores the Route Plan generated by the AI in the Route (Sustainable Roadmap) stage.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Route Plan."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N RoutePlan)"
        },
        "availableHours": {
          "type": "number",
          "description": "User's available hours."
        },
        "commitments": {
          "type": "string",
          "description": "User's commitments."
        },
        "timeline": {
          "type": "string",
          "description": "User's timeline."
        },
        "milestones": {
          "type": "string",
          "description": "Milestones in the Route Plan."
        },
        "weeklyActionSteps": {
          "type": "string",
          "description": "Weekly action steps in the Route Plan."
        },
        "pacing": {
          "type": "string",
          "description": "Pacing suited to real capacity in the Route Plan."
        }
      },
      "required": [
        "id",
        "userId",
        "availableHours",
        "commitments",
        "timeline",
        "milestones",
        "weeklyActionSteps",
        "pacing"
      ]
    },
    "AiCoachConversation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiCoachConversation",
      "type": "object",
      "description": "Stores conversations between the user and the AI Coach.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI Coach conversation."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N AiCoachConversation)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the message.",
          "format": "date-time"
        },
        "userMessage": {
          "type": "string",
          "description": "The user's message in the conversation."
        },
        "aiResponse": {
          "type": "string",
          "description": "The AI Coach's response to the user."
        }
      },
      "required": [
        "id",
        "userId",
        "timestamp",
        "userMessage",
        "aiResponse"
      ]
    },
    "ReflectionPromptResponse": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ReflectionPromptResponse",
      "type": "object",
      "description": "Stores the user's responses to reflection prompts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the reflection prompt response."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ReflectionPromptResponse)"
        },
        "promptText": {
          "type": "string",
          "description": "The text of the reflection prompt."
        },
        "responseText": {
          "type": "string",
          "description": "The user's response to the reflection prompt."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the response.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "promptText",
        "responseText",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  User ID is the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/basecamp",
        "definition": {
          "entityName": "Basecamp",
          "schema": {
            "$ref": "#/backend/entities/Basecamp"
          },
          "description": "Stores Basecamp data for a user. One-to-one relationship with User.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/lifePurposeReports/{lifePurposeReportId}",
        "definition": {
          "entityName": "LifePurposeReport",
          "schema": {
            "$ref": "#/backend/entities/LifePurposeReport"
          },
          "description": "Stores Life Purpose Reports generated for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "lifePurposeReportId",
              "description": "The unique ID of the Life Purpose Report."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/purposeProfiles/{purposeProfileId}",
        "definition": {
          "entityName": "PurposeProfile",
          "schema": {
            "$ref": "#/backend/entities/PurposeProfile"
          },
          "description": "Stores Purpose Profiles generated for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "purposeProfileId",
              "description": "The unique ID of the Purpose Profile."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/routePlans/{routePlanId}",
        "definition": {
          "entityName": "RoutePlan",
          "schema": {
            "$ref": "#/backend/entities/RoutePlan"
          },
          "description": "Stores Route Plans generated for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "routePlanId",
              "description": "The unique ID of the Route Plan."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/aiCoachConversations/{aiCoachConversationId}",
        "definition": {
          "entityName": "AiCoachConversation",
          "schema": {
            "$ref": "#/backend/entities/AiCoachConversation"
          },
          "description": "Stores AI Coach conversations for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "aiCoachConversationId",
              "description": "The unique ID of the AI Coach conversation."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reflectionPromptResponses/{reflectionPromptResponseId}",
        "definition": {
          "entityName": "ReflectionPromptResponse",
          "schema": {
            "$ref": "#/backend/entities/ReflectionPromptResponse"
          },
          "description": "Stores reflection prompt responses for a user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            },
            {
              "name": "reflectionPromptResponseId",
              "description": "The unique ID of the reflection prompt response."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and debuggability, adhering to the core principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). \n\nUser data and associated entities (Basecamp, LifePurposeReport, PurposeProfile, RoutePlan, AiCoachConversation, ReflectionPromptResponse) are organized under the `/users/{userId}` path to enforce clear ownership and simplify security rules. This structure leverages path-based ownership, making it straightforward to implement rules based on `request.auth.uid == userId`.\n\nAuthorization Independence is achieved because subcollections do not require `get()` calls to parent documents for authorization. Each document's access control is determined solely by its location within the `/users/{userId}` hierarchy and the `request.auth.uid`.\n\nQAPs are supported because listing operations are inherently secure within each user's dedicated path. Listing documents in `/users/{userId}/lifePurposeReports` only returns reports owned by that user, without the need for complex filtering in the rules. Data Segregation ensures that each collection has homogeneous security requirements, simplifying rule definitions."
  }
}